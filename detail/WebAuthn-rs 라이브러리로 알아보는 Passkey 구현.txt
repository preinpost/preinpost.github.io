1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/8030a0222e2c2f3b.css",{"as":"style"}]
3:HL["/_next/static/css/e4d3ffa98b3ee490.css",{"as":"style"}]
0:[[["",{"children":["detail",{"children":[["id","WebAuthn-rs%20%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A1%9C%20%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94%20Passkey%20%EA%B5%AC%ED%98%84","d"],{"children":["__PAGE__?{\"id\":\"WebAuthn-rs 라이브러리로 알아보는 Passkey 구현\"}",{}]}]}]},"$undefined","$undefined",true],"$L4",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8030a0222e2c2f3b.css","precedence":"next"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/e4d3ffa98b3ee490.css","precedence":"next"}]],["$L5",["$","meta",null,{"name":"next-size-adjust"}]]]]]
6:I{"id":"7708","chunks":["185:static/chunks/app/layout-655de5e48d90071f.js"],"name":"","async":false}
7:I{"id":"988","chunks":["185:static/chunks/app/layout-655de5e48d90071f.js"],"name":"","async":false}
8:I{"id":"4356","chunks":["185:static/chunks/app/layout-655de5e48d90071f.js"],"name":"","async":false}
9:I{"id":"4463","chunks":["272:static/chunks/webpack-db13a7e6a7caa37b.js","667:static/chunks/2443530c-3f577d13357de5ad.js","488:static/chunks/488-13535ea124b0e0fc.js"],"name":"","async":false}
a:I{"id":"1010","chunks":["272:static/chunks/webpack-db13a7e6a7caa37b.js","667:static/chunks/2443530c-3f577d13357de5ad.js","488:static/chunks/488-13535ea124b0e0fc.js"],"name":"","async":false}
4:[["$","html",null,{"lang":"en","className":"markdown-body","children":[["$","$L6",null,{}],["$","body",null,{"className":"bg-softWhite","children":["$","div",null,{"className":"container relative mx-auto p-6 __className_a64ecd","children":[["$","$L7",null,{}],["$","$L8",null,{}],["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$La",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children","detail","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$La",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L9",null,{"parallelRouterKey":"children","segmentPath":["children","detail","children",["id","WebAuthn-rs%20%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A1%9C%20%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94%20Passkey%20%EA%B5%AC%ED%98%84","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$La",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$Lb",null],"segment":"__PAGE__?{\"id\":\"WebAuthn-rs 라이브러리로 알아보는 Passkey 구현\"}"},"styles":[]}],"segment":["id","WebAuthn-rs%20%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A1%9C%20%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94%20Passkey%20%EA%B5%AC%ED%98%84","d"]},"styles":[]}],"segment":"detail"},"styles":[]}]]}]}]]}],null]
5:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"WebAuthn-rs 라이브러리로 알아보는 Passkey 구현"}],["$","meta",null,{"name":"description","content":"blog"}],null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,[null,["$","meta",null,{"property":"og:title","content":"WebAuthn-rs 라이브러리로 알아보는 Passkey 구현"}],null,null,null,null,null,null,[[["$","meta",null,{"property":"og:image","content":"https://preinpost.github.io/article/WebAuthn-rs%20%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A1%9C%20%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94%20Passkey%20%EA%B5%AC%ED%98%84/title-image.png"}]]],null,null,null,null,null,null,"$undefined"],null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
c:I{"id":"2195","chunks":["703:static/chunks/app/detail/[id]/page-4d95e796f1bf864a.js"],"name":"","async":false}
d:I{"id":"8707","chunks":["703:static/chunks/app/detail/[id]/page-4d95e796f1bf864a.js"],"name":"","async":false}
e:I{"id":"6002","chunks":["703:static/chunks/app/detail/[id]/page-4d95e796f1bf864a.js"],"name":"","async":false}
b:["$","$Lc",null,{"children":[["$","div",null,{"className":"flex flex-col rounded-lg bg-grayishBlack text-softWhite dark:bg-softWhite dark:text-grayishBlack opacity-90 p-6 shadow-[0_2px_15px_-3px_rgba(0,0,0,0.07),0_10px_20px_-2px_rgba(0,0,0,0.04)]","children":[["$","div",null,{"className":"text-lg","children":"WebAuthn-rs 라이브러리로 알아보는 Passkey 구현"}],["$","div",null,{"className":"flex text-sm self-end","children":["$","div",null,{"children":"2024-01-08"}]}]]}],["$","div",null,{"className":"flex mt-2 justify-end flex-wrap","children":[["$","div",null,{"className":"mx-1.5 text-xs inline-flex items-center font-bold leading-sm uppercase px-3 py-1 my-1 bg-grayishBlack text-softWhite dark:bg-softWhite dark:text-grayishBlack border rounded-full border-softWhite dark:border-grayishBlack flex-wrap","children":"rust"}],["$","div",null,{"className":"mx-1.5 text-xs inline-flex items-center font-bold leading-sm uppercase px-3 py-1 my-1 bg-grayishBlack text-softWhite dark:bg-softWhite dark:text-grayishBlack border rounded-full border-softWhite dark:border-grayishBlack flex-wrap","children":"webauthn"}],["$","div",null,{"className":"mx-1.5 text-xs inline-flex items-center font-bold leading-sm uppercase px-3 py-1 my-1 bg-grayishBlack text-softWhite dark:bg-softWhite dark:text-grayishBlack border rounded-full border-softWhite dark:border-grayishBlack flex-wrap","children":"passkey"}]]}],["$","div",null,{"className":"flex justify-center m-16","children":["$","$Ld",null,{"src":"/article/WebAuthn-rs 라이브러리로 알아보는 Passkey 구현/title-image.png","alt":"title-image","width":100,"height":100,"className":"w-3/4 bg-softWhite dark:bg-grayishBlack"}]}],["$","div",null,{"className":"mt-6 p-2","children":["$","div",null,{"className":"flex flex-col bg-softWhite text-grayishBlack dark:bg-grayishBlack dark:text-softWhite","dangerouslySetInnerHTML":{"__html":"<h1><a id=\"user-content-webauthn-이란\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#webauthn-이란\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>WebAuthn 이란</h1>\n<p>FIDO2 라고도 불리는 WebAuthn은 비밀번호로 사용자를 식별하는 것이 아니라, 비밀번호 없이 신뢰 플랫폼 모듈을 이용하여 사용자를 식별하는 웹 표준이다.\n2022년 WWDC와 구글IO 에서 Passkey라는 비밀번호가 없는 공개키 기반의 인증 인터페이스를 공개했었는데, 두 회사의 세션 모두 재미있게 본 기억이 있다. <a href=\"https://developer.apple.com/wwdc22/10092\" rel=\"nofollow\">WWDC링크</a></p>\n<h1><a id=\"user-content-인증-flow\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#인증-flow\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>인증 Flow</h1>\n<p>WebAuthn 인증은 크게 두 부분으로 나눠서 생각할 수 있다. 첫번째는 등록, 두번째는 인증이다.\n개략적인 흐름은 아래와 같다. 두 부분이 큰 흐름이 유사해서 이해하기 어렵지는 않다.</p>\n<h3><a id=\"user-content-register\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#register\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Register</h3>\n<ol>\n<li>클라이언트는 사용자의 이름과 함께 challenge를 서버에 요청</li>\n<li>서버는 <code>start_passkey_registration</code> 함수를 호출하여  <code>CreationChallengeResponse</code> (ccr) 를 서버에서 만들어 클라이언트 응답값으로 전달. <code>start_passkey_registration</code> 함수를 호출하면 <code>CreationChallengeResponse</code> 구조체와 <code>PasskeyRegistration</code> 구조체 두개가 return 된다.</li>\n<li>이때 서버는 <code>PasskeyRegistration</code> 구조체를 세션에 보관하고 있다가 아래 7번의 <code>finish_passkey_registration</code> 함수 호출 시 같이 넣어줘야 한다.</li>\n<li>브라우저는 서버에서 받은 ccr을 <code>navigator.credentials.create</code>  option으로 넣은 후 함수 호출</li>\n<li>사용자의 서명이 끝나면 <code>navigator.credentials.create</code> 함수는 <code>RegisterPublicKeyCredential</code> (rpkc) 구조체를 return 한다.</li>\n<li>브라우저는 rpkc값을 서버로 보낸다.</li>\n<li>서버는 브라우저에서 받은 rpkc값으로 <code>finish_passkey_registration</code> 함수를 호출하여 <code>Passkey</code> 구조체를 만든다.</li>\n<li>\n<code>Passkey</code> 구조체를 영속시키면 인증 시 검증할 수 있게 된다.</li>\n</ol>\n<h3><a id=\"user-content-authentication\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#authentication\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Authentication</h3>\n<ol>\n<li>클라이언트는 사용자 아이디와 함께 인증요청을 서버에 보낸다.</li>\n<li>사용자 아이디를 이용하여 영속시킨 <code>Passkey</code> 구조체를 조회 후, <code>start_passkey_authentication</code> 함수를 호출하여 하여 <code>RequestChallengeResponse</code> (rcr) 를 만들어 클라이언트 응답값으로 전달. <code>start_passkey_authentication</code> 함수를 호출하면 <code>RequestChallengeResponse</code> 구조체와 <code>PassKeyAuthentication</code> 구조체 두개가 return 된다.</li>\n<li>이때 서버는 <code>PassKeyAuthentication</code> 구조체를 세션에 보관하고 있다가 아래 7번의 <code>finish_passkey_authentication</code> 호출 시 같이 함수에 넣어줘야한다.</li>\n<li>브라우저는 서버에서 받은 rcr을  <code>navigator.credentials.get</code> option으로 rcr 넣어서 함수 호출</li>\n<li>사용자의 서명이 끝나면 <code>navigator.credentials.get</code> 함수는 <code>PublicKeyCredetial</code> (pkc) 구조체를 return 한다.</li>\n<li>브라우저는 pkc값을 서버로 보낸다.</li>\n<li>서버는 브라우저에서 받은 pkc 값으로 <code>finish_passkey_authentication</code> 함수를 호출하여 일치하는지 비교한다.</li>\n</ol>\n<h1><a id=\"user-content-구현\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#구현\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>구현</h1>\n<p>클라이언트 부분은 webauthn-rs 라이브러리 example을 따라가지 않고, 순수 javascript로 따로 구현하였다.</p>\n<h3><a id=\"user-content-register-1\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#register-1\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Register</h3>\n<ol>\n<li>Client는 서버에게 Challenge를 요청한다.</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">json</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>  \n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"/login/get_challenge\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>  \n    <span class=\"pl-c1\">method</span>: <span class=\"pl-s\">\"GET\"</span><span class=\"pl-kos\">,</span>  \n    <span class=\"pl-c1\">headers</span>: <span class=\"pl-kos\">{</span>  \n      <span class=\"pl-s\">\"Content-Type\"</span>: <span class=\"pl-s\">\"application/json\"</span><span class=\"pl-kos\">,</span>  \n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">body</span>: <span class=\"pl-kos\">{</span>\n\t  <span class=\"pl-s\">\"id\"</span>: <span class=\"pl-s\">\"Claire\"</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>  \n  \n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">json</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<ol start=\"2\">\n<li>서버는 <code>CreationChallengeResponse</code> 를 다시 Client에 보낸다.</li>\n</ol>\n<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-k\">let</span> <span class=\"pl-kos\">(</span>ccr<span class=\"pl-kos\">,</span> reg_state<span class=\"pl-kos\">)</span> = webauthn  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">start_passkey_registration</span><span class=\"pl-kos\">(</span>  \n        user_unique_id<span class=\"pl-kos\">,</span>  \n        <span class=\"pl-s\">\"claire\"</span><span class=\"pl-kos\">,</span>  \n        <span class=\"pl-s\">\"Claire\"</span><span class=\"pl-kos\">,</span>  \n        <span class=\"pl-v\">None</span><span class=\"pl-kos\">,</span> <span class=\"pl-c\">// No other credentials are registered yet.  </span>\n    <span class=\"pl-kos\">)</span>  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Failed to start registration.\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// PasskeyRegistration 구조체는 session에 보관</span>\nsession<span class=\"pl-kos\">.</span><span class=\"pl-en\">insert</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"reg_state\"</span><span class=\"pl-kos\">,</span> reg_state<span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"fail to insert reg_state\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// CreationChallengeResponse 구조체는 Client에 보낸다.</span>\n<span class=\"pl-v\">Json</span><span class=\"pl-kos\">(</span>ccr<span class=\"pl-kos\">)</span><span class=\"pl-kos\"></span> </pre></div>\n<ol start=\"3\">\n<li>Client는 ccr로 rpkc값을 만든다</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">ccr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">json</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">publicKey</span>  \n  \n<span class=\"pl-c\">// challenge, id는 type 때문에 변환해줌  </span>\n<span class=\"pl-s1\">ccr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">challenge</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">base64urlToUint8Array</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ccr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">challenge</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n<span class=\"pl-s1\">ccr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">user</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">base64urlToUint8Array</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ccr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">user</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n  \n<span class=\"pl-c\">// 브라우저는 ccr을 받아서 navigator.credentials.create 호출해서 option으로 ccr 넣어서 다시 서버로 요청  </span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">credential</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">navigator</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">credentials</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>  \n  <span class=\"pl-c1\">publicKey</span>: <span class=\"pl-s1\">ccr</span>  \n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n  \n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">rpkc</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>  \n  <span class=\"pl-c1\">authenticatorAttachment</span>: <span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">authenticatorAttachment</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-c1\">id</span>: <span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-c1\">rawId</span>: <span class=\"pl-en\">bufferToBase64url</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">rawId</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-c1\">response</span>: <span class=\"pl-kos\">{</span>  \n    <span class=\"pl-c1\">attestationObject</span>: <span class=\"pl-en\">bufferToBase64url</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">attestationObject</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>  \n    <span class=\"pl-c1\">clientDataJSON</span>: <span class=\"pl-en\">bufferToBase64url</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">clientDataJSON</span><span class=\"pl-kos\">)</span>  \n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-c1\">type</span>: <span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">type</span>  \n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>\n<ol start=\"4\">\n<li>Client는 rpkc값을 서버에 전달하고 정상 응답을 서버에게 받으면 된다.</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"/login/member_register\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>  \n  <span class=\"pl-c1\">method</span>: <span class=\"pl-s\">\"POST\"</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-c1\">headers</span>: <span class=\"pl-kos\">{</span>  \n    <span class=\"pl-s\">\"Content-Type\"</span>: <span class=\"pl-s\">\"application/json\"</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-c1\">body</span>: <span class=\"pl-c1\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">stringify</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rpkc</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>  \n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<ol start=\"5\">\n<li>서버는 session에서 <code>PasskeyRegistration</code> 를 찾고 요청값인 rpkc 를 가지고 인증한다.</li>\n</ol>\n<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">// session에서 PasskeyRegistration 값을 꺼낸다.</span>\n<span class=\"pl-k\">let</span> reg_state = session<span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">::</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">PasskeyRegistration</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"reg_state\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unwrap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unwrap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> sk = webauthn  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">finish_passkey_registration</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span>rpkc<span class=\"pl-kos\">,</span> <span class=\"pl-c1\">&amp;</span>reg_state<span class=\"pl-kos\">)</span>  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">map_err</span><span class=\"pl-kos\">(</span>|e| <span class=\"pl-kos\">{</span>  \n        <span class=\"pl-en\">info</span><span class=\"pl-en\">!</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"challenge_register -&gt; {:?}\"</span>, e<span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">HttpResponse</span><span class=\"pl-kos\">::</span><span class=\"pl-v\">BadRequest</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">finish</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"error\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// 성공 시 Passkey 영속시킨다.</span>\n<span class=\"pl-k\">let</span> cnt = sqlx<span class=\"pl-kos\">::</span><span class=\"pl-en\">query</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"INSERT INTO users (user_id, name, passkey) VALUES ($1, $2, $3)\"</span><span class=\"pl-kos\">)</span>  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Claire\"</span><span class=\"pl-kos\">)</span>  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"John Doe\"</span><span class=\"pl-kos\">)</span>  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span>sk<span class=\"pl-kos\">)</span>  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">execute</span><span class=\"pl-kos\">(</span>pool<span class=\"pl-kos\">.</span><span class=\"pl-en\">get_ref</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-k\">await</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unwrap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<h3><a id=\"user-content-authentication-1\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#authentication-1\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Authentication</h3>\n<ol>\n<li>Client는 사용자 아이디와 함께 인증요청을 서버에 보내서 rcr을 받아온다.</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">json</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>  \n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"/login/get_login_challenge\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>  \n    <span class=\"pl-c1\">method</span>: <span class=\"pl-s\">\"GET\"</span><span class=\"pl-kos\">,</span>  \n    <span class=\"pl-c1\">headers</span>: <span class=\"pl-kos\">{</span>  \n      <span class=\"pl-s\">\"Content-Type\"</span>: <span class=\"pl-s\">\"application/json\"</span><span class=\"pl-kos\">,</span>  \n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">body</span>: <span class=\"pl-kos\">{</span>\n\t  <span class=\"pl-s\">\"id\"</span>: <span class=\"pl-s\">\"Claire\"</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  \n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">json</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<ol start=\"2\">\n<li>서버는  <code>RequestChallengeResponse</code> 를 다시 Client에 보낸다</li>\n</ol>\n<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">// 영속시킨 Passkey를 찾아서 꺼낸다.</span>\n<span class=\"pl-k\">let</span> user = sqlx<span class=\"pl-kos\">::</span><span class=\"pl-en\">query_as</span><span class=\"pl-kos\">::</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">_</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">User</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"SELECT * FROM users WHERE user_id = 'Claire'\"</span><span class=\"pl-kos\">)</span>  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">fetch_one</span><span class=\"pl-kos\">(</span>pool<span class=\"pl-kos\">.</span><span class=\"pl-en\">get_ref</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-k\">await</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unwrap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> passkey = general_purpose<span class=\"pl-kos\">::</span><span class=\"pl-v\">URL_SAFE_NO_PAD</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">decode</span><span class=\"pl-kos\">(</span>user<span class=\"pl-kos\">.</span><span class=\"pl-c1\">passkey</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">as_bytes</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unwrap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> passkey<span class=\"pl-kos\">:</span> <span class=\"pl-smi\">Passkey</span> = serde_json<span class=\"pl-kos\">::</span><span class=\"pl-en\">from_str</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">String</span><span class=\"pl-kos\">::</span><span class=\"pl-en\">from_utf8</span><span class=\"pl-kos\">(</span>passkey<span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unwrap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">as_str</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unwrap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// Passkey를 복구한 후 start_passkey_authentication 함수를 호출하여 RequestChallengeResponse, PassKeyAuthentication 구조체를 얻는다.</span>\n<span class=\"pl-k\">let</span> <span class=\"pl-kos\">(</span>rcr<span class=\"pl-kos\">,</span> auth_state<span class=\"pl-kos\">)</span> = webauthn<span class=\"pl-kos\">.</span><span class=\"pl-en\">start_passkey_authentication</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-c1\">*</span><span class=\"pl-en\">vec</span><span class=\"pl-en\">!</span><span class=\"pl-kos\">[</span>passkey<span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Failed to start login.\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// PassKeyAuthentication는 session에 넣어준다.</span>\nsession<span class=\"pl-kos\">.</span><span class=\"pl-en\">insert</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"auth_state\"</span><span class=\"pl-kos\">,</span> auth_state<span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"fail to insert auth_state\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// RequestChallengeResponse 구조체는 Client에 보낸다.</span>\n<span class=\"pl-v\">Json</span><span class=\"pl-kos\">(</span>rcr<span class=\"pl-kos\">)</span><span class=\"pl-kos\"></span></pre></div>\n<ol start=\"3\">\n<li>Client는 rcr로 pkc를 만든다.</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">rcr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">json</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">publicKey</span><span class=\"pl-kos\">;</span>  \n  \n<span class=\"pl-c\">// challenge, id는 type 때문에 변환해줌  </span>\n<span class=\"pl-s1\">rcr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">challenge</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">base64urlToUint8Array</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rcr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">challenge</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n<span class=\"pl-s1\">rcr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">allowCredentials</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">rcr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">allowCredentials</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ac</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>  \n  <span class=\"pl-s1\">ac</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">base64urlToUint8Array</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ac</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ac</span><span class=\"pl-kos\">;</span>  \n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">credential</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">navigator</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">credentials</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>  \n  <span class=\"pl-c1\">publicKey</span>: <span class=\"pl-s1\">rcr</span>  \n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">pkc</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>  \n  <span class=\"pl-c1\">authenticatorAttachment</span>: <span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">authenticatorAttachment</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-c1\">id</span>: <span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">id</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-c1\">rawId</span>: <span class=\"pl-en\">bufferToBase64url</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">rawId</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-c1\">response</span>: <span class=\"pl-kos\">{</span>  \n    <span class=\"pl-c1\">authenticatorData</span>: <span class=\"pl-en\">bufferToBase64url</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">authenticatorData</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>  \n    <span class=\"pl-c1\">clientDataJSON</span>: <span class=\"pl-en\">bufferToBase64url</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">clientDataJSON</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>  \n    <span class=\"pl-c1\">signature</span>: <span class=\"pl-en\">bufferToBase64url</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">signature</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>  \n    <span class=\"pl-c1\">userHandle</span>: <span class=\"pl-en\">bufferToBase64url</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">userHandle</span><span class=\"pl-kos\">)</span>  \n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-c1\">type</span>: <span class=\"pl-s1\">credential</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">type</span>  \n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>\n<ol start=\"4\">\n<li>Client는 pkc값을 서버에 전달하고 정상 응답을 서버에게 받으면 된다.</li>\n</ol>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"/login/member_login\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>  \n  <span class=\"pl-c1\">method</span>: <span class=\"pl-s\">\"POST\"</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-c1\">headers</span>: <span class=\"pl-kos\">{</span>  \n    <span class=\"pl-s\">\"Content-Type\"</span>: <span class=\"pl-s\">\"application/json\"</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-c1\">body</span>: <span class=\"pl-c1\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">stringify</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">serializeable</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<ol start=\"5\">\n<li>서버는 session에서 <code>PassKeyAuthentication</code> 를 찾고 요청값인 pkc 를 가지고 인증한다.</li>\n</ol>\n<div class=\"highlight highlight-source-rust\"><pre><span class=\"pl-c\">// 세션에서 PassKeyAuthentication 를 꺼낸다.</span>\n<span class=\"pl-k\">let</span> auth_state = session<span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">::</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">PasskeyAuthentication</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"auth_state\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unwrap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unwrap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> auth_result = webauthn  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">finish_passkey_authentication</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span>pkc<span class=\"pl-kos\">,</span> <span class=\"pl-c1\">&amp;</span>auth_state<span class=\"pl-kos\">)</span>  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">map_err</span><span class=\"pl-kos\">(</span>|e| <span class=\"pl-kos\">{</span>  \n        <span class=\"pl-en\">info</span><span class=\"pl-en\">!</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"challenge_register -&gt; {:?}\"</span>, e<span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">HttpResponse</span><span class=\"pl-kos\">::</span><span class=\"pl-v\">BadRequest</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">finish</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>  \n    <span class=\"pl-kos\">.</span><span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"error\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// 정상 응답을 해준다.</span>\n<span class=\"pl-smi\">HttpResponse</span><span class=\"pl-kos\">::</span><span class=\"pl-v\">Ok</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">finish</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\"></span></pre></div>\n<h3><a id=\"user-content-특이사항\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#특이사항\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>특이사항</h3>\n<p><code>navigator.credentials.create</code>, <code>navigator.credentials.get</code>  두 함수 호출 시 Uint8Array 로 타입이 지정된 것들이 있어 Json 변환 시 제대로 변환되지 않는 문제가 있다. 아래 함수를 사용해서 base64url 인코딩해서 서버로 보내면 Json 변환 문제도 해결할 수 있다.</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">bufferToBase64url</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">buffer</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>  \n  \n  <span class=\"pl-c\">// modified from https://github.com/github/webauthn-json/blob/main/src/webauthn-json/base64url.ts  </span>\n  \n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">byteView</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Uint8Array</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">buffer</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">str</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">;</span>  \n  <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">const</span> <span class=\"pl-s1\">charCode</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">byteView</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>  \n    <span class=\"pl-s1\">str</span> <span class=\"pl-c1\">+=</span> <span class=\"pl-v\">String</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">fromCharCode</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">charCode</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n  <span class=\"pl-kos\">}</span>  \n  \n  <span class=\"pl-c\">// Binary string to base64  </span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">base64String</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">btoa</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">str</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n  \n  <span class=\"pl-c\">// Base64 to base64url  </span>\n  <span class=\"pl-c\">// We assume that the base64url string is well-formed.  const base64urlString = base64String.replace(/\\+/g, \"-\").replace(  </span>\n    <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">\\/</span><span class=\"pl-c1\">/</span>g</span><span class=\"pl-kos\">,</span>  \n    <span class=\"pl-s\">\"_\"</span><span class=\"pl-kos\">,</span>  \n  <span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span>=<span class=\"pl-c1\">/</span>g</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>  \n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">base64urlString</span><span class=\"pl-kos\">;</span>  \n<span class=\"pl-kos\">}</span>  \n  \n<span class=\"pl-k\">function</span> <span class=\"pl-en\">base64urlToUint8Array</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">str</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>  \n  <span class=\"pl-k\">return</span> <span class=\"pl-v\">Uint8Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">from</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">atob</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">str</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span>-<span class=\"pl-c1\">/</span>g</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'+'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span>_<span class=\"pl-c1\">/</span>g</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'/'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">\\s</span><span class=\"pl-c1\">/</span>g</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">''</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">c</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">c</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">charCodeAt</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>  \n<span class=\"pl-kos\">}</span></pre></div>\n<h3><a id=\"user-content-참고문서\" class=\"anchor\" aria-hidden=\"true\" tabindex=\"-1\" href=\"#참고문서\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>참고문서</h3>\n<ul>\n<li><a href=\"https://www.w3.org/TR/webauthn-2/#webauthn-relying-party\" rel=\"nofollow\">https://www.w3.org/TR/webauthn-2/#webauthn-relying-party</a></li>\n<li><a href=\"https://webauthn.guide/\" rel=\"nofollow\">https://webauthn.guide/</a></li>\n</ul>\n"}}]}],["$","$Le",null,{}]]}]
